<?php
/**
 * @file
 * Main bootstrap file of the fabric_canvas_view module.
 */
<<<<<<< HEAD

=======
function fabric_canvas_view_field_formatter_info() {
	return array(
    'bla' => array(
		'label' => t('bla'),
		'field types' => array('json'),
		'settings' => array(
			'width' => '', 
			'height' => '',
			'scale' => ''
			),
		),
  );
}
function fabric_canvas_view_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	foreach ($items as $delta => $item) {
		$element[$delta] = _get_fabric_canvas_view_field( $entity, $delta, $item, $display);
	}
	//return $element;
	return array(
			'#prefix' => '<div id="canvas_json_wrap">XXX',
			'#suffix' => '</div>',
	);
}
>>>>>>> 59494ef1057130bc007e89a3029f9fdf0101d5f2
function get_svg(){
	$animals= drupal_get_path("module", "fabric_canvas_view").'/svg/animals';
	
	$scanned_directory = array_diff(scandir($animals), array('..', '.'));

	drupal_add_js(array('canvas_view' => array("svg_items" => array("animals" => $scanned_directory ))), 'setting');
	
	$borders= drupal_get_path("module", "fabric_canvas_view").'/svg/borders';
	
	$scanned_directory = array_diff(scandir($borders), array('..', '.'));

	drupal_add_js(array('canvas_view' => array("svg_items" => array("borders" => $scanned_directory ))), 'setting');
	
}
//get field contents for canvas
/* function fabric_canvas_view_preprocess_field(&$variables) {
	
	if(isset($variables["element"]["#field_type"])){
		if($variables["element"]["#field_type"] === "text_with_summary"){
			$out = [];
			foreach ($variables["element"]["#items"] as $k => $item){
				$out[] = array("title" => $item["safe_value"], "field_name" => $variables["element"]["#field_name"] , "type" => "text_with_summary");
			}
		}
		/* if($variables["element"]["#field_type"] === "entityreference"){
			$out = [];
		foreach ($variables["element"]["#items"] as $k => $item){
		$node_ref =  node_load($item["target_id"]);
		$out[] = array("title" => $node_ref->title, "field_name" => $variables["element"]["#field_name"] ,"type" => "entityreference");

		}
		drupal_add_js(array('canvas_view' =>  array("text_items" => $out)), 'setting');
		} */
	/* }
	if($variables["element"]["#field_type"] === "image"){
		$out = [];
		foreach ($variables["element"]["#items"] as $k => $item){
			$url = file_create_url($item['uri']);

			$out[] = array("filename" => $item["filename"],"fid" =>  $item["fid"], "src" => $url, "field_name" => $variables["element"]["#field_name"] ,"type" => "image");

		}
		drupal_add_js(array('canvas_view' =>  array("image_items" => $out)), 'setting');

	}

} */
 
function fabric_canvas_view_menu() {
  $menu = array();

  $menu['file_upload_handler'] = array(
    'title' => 'file_upload_handler',
    //'page callback' => 'file_upload_handler',
    'page callback' => '_save_upload',
    'access callback' => 'file_upload_handler_access',
    'file' => 'fabric_canvas_view.pages.inc',
     'delivery callback' => '_deliver_page',
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );

  $menu['save_canvas_handler'] = array(
    'title' => 'file_upload_handler',
    'page callback' => 'save_canvas_handler',
    //'page arguments' => array(2),
    'access callback' => 'file_upload_handler_access',
    'file' => 'fabric_canvas_view.pages.inc',
	'delivery callback' => '_deliver_page',
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );

  $menu['uri_2_url/%'] = array(
  		'title' => 'file_upload_handler',
  		'page callback' => '_uri_2_url',
  		'page arguments' => array(1),
  		'access callback' => 'file_upload_handler_access',
  		'file' => 'fabric_canvas_view.pages.inc',
  		'delivery callback' => '_deliver_page',
  		'type' => MENU_CALLBACK,
  		'weight' => 0,
  );
  $menu['delete_fid/%/%'] = array(
  		'title' => 'file_upload_handler',
  		'page callback' => '_delete_fid',
  		'page arguments' => array(1,2),
  		'access callback' => 'file_upload_handler_access',
  		'file' => 'fabric_canvas_view.pages.inc',
  		'delivery callback' => '_deliver_page',
  		'type' => MENU_CALLBACK,
  		'weight' => 0,
  );
  
  return $menu;
}
function _deliver_page($page_callback_result) {
// $page_callback_result;
  drupal_exit();
}
function file_upload_handler_access() {
  return TRUE;
}
<<<<<<< HEAD
=======
function fabric_canvas_view_node_view($node){
	//drupal_add_library('system', 'ui.accordion');
	//drupal_add_library('system', 'ui.dialog');
	//drupal_add_library('system', 'ui.button');
	//drupal_add_library('system', 'ui.slider');
	//drupal_add_library('system', 'effects.blind');
	//drupal_add_library('system', 'farbtastic');
	//get_svg();
	//drupal_add_js(array('canvas_view' =>  array("current_node" => $node->nid)), 'setting');	
}
>>>>>>> 59494ef1057130bc007e89a3029f9fdf0101d5f2
function fabric_canvas_view_file_download(){
	//return array();
	return null;
}
<<<<<<< HEAD
=======

///**
 //* Implements hook_field_info().
 //*
 //* Provides the description of the field.
 //*/
//function fabric_canvas_view_field_info() {
  //return array(
    //// We name our field as the associative name of the array.
    //'field_fabric_canvas_view' => array(
      //'label' => t('fabric canvas view'),
      //'description' => t('ss'),
      //'default_widget' => 'fabric_canvas_view_default_widget',
      //'default_formatter' => 'fabric_canvas_view_simple',
    //),
  //);
//}

///**
 //* Implements hook_field_widget_info().
 //*
 //* Three widgets are provided.
 //* - A simple text-only widget where the user enters the '#ffffff'.
 //* - A 3-textfield widget that gathers the red, green, and blue values
 //*   separately.
 //* - A farbtastic colorpicker widget that chooses the value graphically.
 //*
 //* These widget types will eventually show up in hook_field_widget_form,
 //* where we will have to flesh them out.
 //*
 //* @see field_example_field_widget_form()
 //*/
//function fabric_canvas_view_field_widget_info() {
  //return array(
    //'fabric_canvas_view_default_widget' => array(
      //'label' => t('fabric_canvas_view_default_widget'),
      //'field types' => array('field_fabric_canvas_view'),
    //),
  //);
//}

///**
 //* Implements hook_field_formatter_info().
 //*
 //* We need to tell Drupal that we have  different types of formatters
 //* for this field. 
 //*
 //* @see field_example_field_formatter_view()
 //*/
//function fabric_canvas_view_field_formatter_info() {
  //return array(
    //'fabric_canvas_view_simple' => array(
      //'label' => t('Simple'),
      //'field types' => array('field_fabric_canvas_view'),
    //),
  //);
//}

///**
 //* Implements hook_field_formatter_view().
 //*

 //*
 //* @see field_example_field_formatter_info()
 //*/
//function fabric_canvas_view_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	//$element = array();
	//foreach ($items as $delta => $item) {
		//$element[$delta] = array(
		  //// We create a render array to produce the desired markup,
		  //// "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
		  //// See theme_html_tag().
		  //'#type' => 'html_tag',
		  //'#tag' => 'p',
		  //'#attributes' => array(
			//'style' => 'color: ',// . $item['rgb'],
		  //),
		  //'#value' => t('The color code in this field ')
		//);
	//};

  

  //return $element;
//}
//function fabric_canvas_view_field_is_empty(){
 //return empty($item['fabric_canvas_view']);
//}

///**
 //* Implements hook_field_validate().
 //*
 //* This hook gives us a chance to validate content that's in our
 //* field. We're really only interested in the $items parameter, since
 //* it holds arrays representing content in the field we've defined.
 //* We want to verify that the items only contain RGB hex values like
 //* this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 //* validate, we add our own error notification to the $errors parameter.
 //*
 //* @see field_example_field_widget_error()
 //*/
//function fabric_canvas_view_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  //foreach ($items as $delta => $item) {
    //if (!empty($item['fabric_canvas_view'])) {
      ////if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        ////$errors[$field['field_name']][$langcode][$delta][] = array(
          ////'error' => 'field_example_invalid',
          ////'message' => t('Color must be in the HTML format #abcdef.'),
        ////);
      ////}
    //}
    
  //}

//}
//function fabric_canvas_view_simple_validate($element, &$form_state){
	
      //form_set_value($element, $value, $form_state);
//}
///**
 //* Implements hook_field_widget_error().
 //*
 //* hook_field_widget_error() lets us figure out what to do with errors
 //* we might have generated in hook_field_validate(). Generally, we'll just
 //* call form_error().
 //*
 //* @see field_example_field_validate()
 //* @see form_error()
 //*/
//function fabric_canvas_view_widget_error($element, $error, $form, &$form_state) {
  //switch ($error['error']) {
    //case 'field_example_invalid':
      //form_error($element, $error['message']);
      //break;
  //}
//}


//function fabric_canvas_view_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
//$value = isset($items[$delta]['fabric_canvas_view']) ? $items[$delta]['fabric_canvas_view'] : 'xxx';

  //$widget = $element;
  //$widget['#delta'] = $delta;
  //$widget += array(
    //'#type' => 'textfield',
        //'#default_value' => $value,
        //// Allow a slightly larger size that the field length to allow for some
        //// configurations where all characters won't fit in input field.
        //'#size' => 7,
        //'#maxlength' => 7,
  //);
  
  //$element['fabric_canvas_view'] = $widget;

 //return $element;
//}
>>>>>>> 59494ef1057130bc007e89a3029f9fdf0101d5f2
